import cv2
import numpy as np

# Load pre-trained model for license plate detection (e.g., YOLO)
net = cv2.dnn.readNet("yolo.weights", "yolo.cfg")  # Adjust paths accordingly
layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

# Function to perform license plate recognition on a given frame
def recognize_license_plate(frame):
    height, width, _ = frame.shape

    # Preprocess the frame (e.g., resizing, normalization)
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)

    # Process the detections
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]

            if confidence > 0.5:  # Adjust confidence threshold as needed
                # Extract bounding box coordinates
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                # Extract region of interest (ROI) for license plate
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                roi = frame[y:y+h, x:x+w]

                # Perform OCR (Optical Character Recognition) on the license plate ROI
                # (You'll need to integrate an OCR library such as Tesseract for this step)

                # Display bounding box and recognized text on the frame
                color = (0, 255, 0)
                cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                cv2.putText(frame, 'License Plate', (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

    return frame

# Main function to process live video feed
def process_video_feed():
    cap = cv2.VideoCapture(0)  # Adjust camera index if necessary

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        frame = recognize_license_plate(frame)

        cv2.imshow("ALPR", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    process_video_feed()
